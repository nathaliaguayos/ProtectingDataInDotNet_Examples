using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DotNet_SQLiVulnerability
{
    class Program
    {
        static void Main(string[] args)
        {
            /*Connect to te database
            This is not a valid connection String and this will not work, since I don´t have a real DB configured here*/
            String connString = @"connection String example"; 
            SqlConnection sqlConnection= new SqlConnection(connString); 
            
            /*Get some untrusted data. The exploit usually comes from some Internet-exposed source.
             like an HTTP request parameter.*/
            String untrustedData = "SQL INJECTION EXPLOIT STRING";

            /*Create a dangerous dynamic query using concatenation
             SQLi OCCURS HERE*/
            string unsafeDynamicQuery = "SELECT * FROM Users  WHERE name='"+untrustedData+"';";
            SqlCommand sqlcmd = new SqlCommand(unsafeDynamicQuery,sqlConnection);
            sqlConnection.Open();

            /*Execute the dangerous query. The exploit data is sent to the database.*/
            SqlDataReader reader = sqlcmd.ExecuteReader();

            /*Process the results
             The SQLi has taken place already
             All your DB now belong to me*/
            while (reader.Read())
            {
                //Processing the data the way that I want.
            }

            /*Clean up
             I should be handling errors too, but this is just a demo script*/

            reader.Close();
            sqlConnection.Close();
        }
    }
}
